import logging
import re
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, KeyboardButton
from telegram.ext import (Application, CommandHandler, MessageHandler,
                          ConversationHandler, ContextTypes, filters)

# –ï—Ç–∞–ø–∏ –∞–Ω–∫–µ—Ç–∏
(SELECT_ROLE, ENTER_CITY, ENTER_PHONE, ENTER_NAME, ENTER_PHOTO, ENTER_WORK_TYPES,
 ENTER_SEARCH_ROLE, ENTER_WORK_PHOTOS) = range(8)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç –£–∫—Ä–∞—ó–Ω–∏ (–ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏)
CITIES = [
    "–ö–∏—ó–≤", "–•–∞—Ä–∫—ñ–≤", "–û–¥–µ—Å–∞", "–î–Ω—ñ–ø—Ä–æ", "–õ—å–≤—ñ–≤",
    "–ó–∞–ø–æ—Ä—ñ–∂–∂—è", "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "–ú–∏–∫–æ–ª–∞—ó–≤", "–ú–∞—Ä—ñ—É–ø–æ–ª—å", "–í—ñ–Ω–Ω–∏—Ü—è",
    "–•–µ—Ä—Å–æ–Ω", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤", "–ü–æ–ª—Ç–∞–≤–∞", "–ß–µ—Ä–∫–∞—Å–∏", "–°—É–º–∏",
    "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å", "–£–∂–≥–æ—Ä–æ–¥", "–õ—É—Ü—å–∫", "–†—ñ–≤–Ω–µ"
]
CITIES.sort()
CITIES.insert(0, "–ö–∏—ó–≤")

# –í–∏–¥–∏ —Ä–æ–±—ñ—Ç
WORK_TYPES = ["–ü–ª–∏—Ç–∫–∞", "–ì—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–ú–∞–ª—è—Ä–Ω—ñ —Ä–æ–±–æ—Ç–∏", "–ï–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ä–µ–º–æ–Ω—Ç"]
SEARCH_ROLES = ["–ü–æ–º—ñ—á–Ω–∏–∫–∞", "–ù–∞–ø–∞—Ä–Ω–∏–∫–∞", "–ü—Ä–æ—Ä–∞–±–∞"]
OFFER_ROLES = ["–ü–æ–º—ñ—á–Ω–∏–∫", "–ù–∞–ø–∞—Ä–Ω–∏–∫", "–ü—Ä–æ—Ä–∞–±"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–ó–Ω–∞–π—Ç–∏"], ["–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–µ–±–µ"]]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECT_ROLE

async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    context.user_data['choice'] = choice

    if choice == "–ó–Ω–∞–π—Ç–∏":
        await update.message.reply_text(
            "üîé –í—ñ—Ç–∞—é —Ç–µ–±–µ, –º–∞–π—Å—Ç—Ä–µ! –©–æ–± –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å.\n\nüìç –û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –∑–¥—ñ–π—Å–Ω—é—î—à –ø–æ—à—É–∫:",
            reply_markup=ReplyKeyboardMarkup([[city] for city in CITIES], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "üß∞ –í—ñ—Ç–∞—é —Ç–µ–±–µ, –º–∞–π—Å—Ç—Ä–µ! –©–æ–± –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–µ–±–µ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å.\n\nüìç –û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –∑–¥—ñ–π—Å–Ω—é—î—à –ø–æ—à—É–∫:",
            reply_markup=ReplyKeyboardMarkup([[city] for city in CITIES], resize_keyboard=True)
        )

    return ENTER_CITY

async def enter_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 0991234567:", reply_markup=ReplyKeyboardRemove())
    return ENTER_PHONE

async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"0\d{9}", phone):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ: 0991234567")
        return ENTER_PHONE

    context.user_data['phone'] = phone
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏ —ñ–º‚Äô—è, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –≤—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ, 32):")
    return ENTER_NAME

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—î —Ñ–æ—Ç–æ:")
    return ENTER_PHOTO

async def enter_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = update.message.photo[-1].file_id
    context.user_data['photo'] = photo_file

    if context.user_data['choice'] == "–ó–Ω–∞–π—Ç–∏":
        await update.message.reply_text(
            "üîß –Ø–∫—ñ –≤–∏–¥–∏ —Ä–æ–±—ñ—Ç —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([[wt] for wt in WORK_TYPES], resize_keyboard=True)
        )
        return ENTER_WORK_TYPES
    else:
        await update.message.reply_text(
            "üîß –Ø–∫—ñ –≤–∏–¥–∏ —Ä–æ–±—ñ—Ç —Ç–∏ –ø—Ä–æ–ø–æ–Ω—É—î—à?",
            reply_markup=ReplyKeyboardMarkup([[wt] for wt in WORK_TYPES], resize_keyboard=True)
        )
        return ENTER_WORK_TYPES

async def enter_work_types(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['work_types'] = update.message.text

    if context.user_data['choice'] == "–ó–Ω–∞–π—Ç–∏":
        await update.message.reply_text(
            "üë§ –ö–æ–≥–æ —Ç–∏ —à—É–∫–∞—î—à?",
            reply_markup=ReplyKeyboardMarkup([[r] for r in SEARCH_ROLES], resize_keyboard=True)
        )
        return ENTER_SEARCH_ROLE
    else:
        await update.message.reply_text("üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂ 2‚Äì5 —Ñ–æ—Ç–æ —Å–≤–æ—ó—Ö —Ä–æ–±—ñ—Ç:")
        context.user_data['work_photos'] = []
        return ENTER_WORK_PHOTOS

async def enter_search_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['search_role'] = update.message.text
    await update.message.reply_text("‚úÖ –î—è–∫—É—é! –ú–∏ –ø–æ—á–Ω–µ–º–æ –ø–æ—à—É–∫ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ.")
    return ConversationHandler.END

async def enter_work_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = update.message.photo[-1].file_id
    context.user_data['work_photos'].append(photo_file)

    if len(context.user_data['work_photos']) >= 2:
        await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –û—á—ñ–∫—É–π –Ω–∞ –≤—ñ–¥–≥—É–∫–∏.")
        return ConversationHandler.END
    else:
        await update.message.reply_text("üì∑ –ó–∞–≤–∞–Ω—Ç–∞–∂ —â–µ —Ñ–æ—Ç–æ —Å–≤–æ—ó—Ö —Ä–æ–±—ñ—Ç (–º—ñ–Ω—ñ–º—É–º 2):")
        return ENTER_WORK_PHOTOS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

if __name__ == '__main__':
    import os
    from telegram.ext import ApplicationBuilder

    TOKEN = "7948052574:AAGCJIIz6o5cXX8WlgXQPmusJJm1ZLcQvYI"  # üîÅ –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_role)],
            ENTER_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_city)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTER_PHOTO: [MessageHandler(filters.PHOTO, enter_photo)],
            ENTER_WORK_TYPES: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_work_types)],
            ENTER_SEARCH_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_search_role)],
            ENTER_WORK_PHOTOS: [MessageHandler(filters.PHOTO, enter_work_photos)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    print("üîß –°—Ç–∞—Ä—Ç—É—î –±–æ—Ç...")
    app.run_polling()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î –∫–æ–º–∞–Ω–¥–∏ /start")
